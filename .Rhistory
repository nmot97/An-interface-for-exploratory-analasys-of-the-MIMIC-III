box(
width = 10,status = "primary",
tabsetPanel(
id = 'dataset',
tabPanel("Admission type", DT::dataTableOutput("mytable1"), plotlyOutput("grafico1")),
tabPanel("Admission location", DT::dataTableOutput("mytable2"), plotlyOutput("grafico2")),
tabPanel("Dischard location", DT::dataTableOutput("mytable3"),  plotlyOutput("grafico3")),
tabPanel("Insurance", DT::dataTableOutput("mytable4"),  plotlyOutput("grafico4")),
tabPanel("Diagnosis", DT::dataTableOutput("mytable5"),  plotlyOutput("grafico5")),
),
)
)
), #fim admissions
tabItem(tabName = "diagnoses1",
h3("General view of the ICD-9 Codes"),
fluidRow(
box(
plotlyOutput("graficoICDS")
),
box(
h3("Select IC9 code to see a summary:"),
width = 3,
selectInput( "code9", "Select the ICD9 code", choices = c(
"INFECTIOUS AND PARASITIC DISEASES (001-139)" ="parasit",
"NEOPLASMS (140-239)" = "neoplasm",
"ENDOCRINE, NUTRITIONAL AND METABOLIC DISEASES, AND IMMUNITY DISORDERS (240-279)" = "endocrine",
"DISEASES OF THE BLOOD AND BLOOD-FORMING ORGANS (280-289)" = "blood",
"MENTAL DISORDERS (290-319)" = "mental",
"DISEASES OF THE NERVOUS SYSTEM AND SENSE ORGANS (320-389)" = "nervous",
"DISEASES OF THE CIRCULATORY SYSTEM (390-459)" = "circulatory",
"DISEASES OF THE RESPIRATORY SYSTEM (460-519)" = "respiratory",
"DISEASES OF THE DIGESTIVE SYSTEM (520-579)" = "digestive",
"DISEASES OF THE GENITOURINARY SYSTEM (580-629)" = "genitourinary",
"COMPLICATIONS OF PREGNANCY, CHILDBIRTH, AND THE PUERPERIUM (630-679)" = "pregnancy",
"DISEASES OF THE SKIN AND SUBCUTANEOUS TISSUE (680-709)" = "skin",
"DISEASES OF THE MUSCULOSKELETAL SYSTEM AND CONNECTIVE TISSUE (710-739)" ="muscle",
"CONGENITAL ANOMALIES (740-759)" = "anomalies",
"CERTAIN CONDITIONS ORIGINATING IN THE PERINATAL PERIOD (760-779)" = "perinatal",
"SYMPTOMS, SIGNS, AND ILL-DEFINED CONDITIONS (780-799)" ="signs",
"INJURY AND POISONING (800-999)" ="poison",
"SUPPLEMENTARY CLASSIFICATION OF FACTORS INFLUENCING HEALTH STATUS AND CONTACT WITH HEALTH SERVICES (V01-V89)" ="v1",
"SUPPLEMENTARY CLASSIFICATION OF EXTERNAL CAUSES OF INJURY AND POISONING (E800-E999)" = "v2"
)
)
)
)
),
tabItem(tabName = "diagnoses2",
h5("ICD-9 Codes -Diseases and Parasitic Diseases"),
fluidRow(
box(
width = 3,
selectInput( "code9", "Select the ICD9 code", choices = c(
"INFECTIOUS AND PARASITIC DISEASES (001-139)" ="parasit",
"NEOPLASMS (140-239)" = "neoplasm",
"ENDOCRINE, NUTRITIONAL AND METABOLIC DISEASES, AND IMMUNITY DISORDERS (240-279)" = "endocrine",
"DISEASES OF THE BLOOD AND BLOOD-FORMING ORGANS (280-289)" = "blood",
"MENTAL DISORDERS (290-319)" = "mental",
"DISEASES OF THE NERVOUS SYSTEM AND SENSE ORGANS (320-389)" = "nervous",
"DISEASES OF THE CIRCULATORY SYSTEM (390-459)" = "circulatory",
"DISEASES OF THE RESPIRATORY SYSTEM (460-519)" = "respiratory",
"DISEASES OF THE DIGESTIVE SYSTEM (520-579)" = "digestive",
"DISEASES OF THE GENITOURINARY SYSTEM (580-629)" = "genitourinary",
"COMPLICATIONS OF PREGNANCY, CHILDBIRTH, AND THE PUERPERIUM (630-679)" = "pregnancy",
"DISEASES OF THE SKIN AND SUBCUTANEOUS TISSUE (680-709)" = "skin",
"DISEASES OF THE MUSCULOSKELETAL SYSTEM AND CONNECTIVE TISSUE (710-739)" ="muscle",
"CONGENITAL ANOMALIES (740-759)" = "anomalies",
"CERTAIN CONDITIONS ORIGINATING IN THE PERINATAL PERIOD (760-779)" = "perinatal",
"SYMPTOMS, SIGNS, AND ILL-DEFINED CONDITIONS (780-799)" ="signs",
"INJURY AND POISONING (800-999)" ="poison",
"SUPPLEMENTARY CLASSIFICATION OF FACTORS INFLUENCING HEALTH STATUS AND CONTACT WITH HEALTH SERVICES (V01-V89)" ="v1",
"SUPPLEMENTARY CLASSIFICATION OF EXTERNAL CAUSES OF INJURY AND POISONING (E800-E999)" = "v2"
)
)
), #fim box
box(
width = 11,
plotlyOutput("icddiagnoses")
)
)
),
tabItem(tabName = "search",
h5("Here you can make different kind of searches"),
sidebarLayout(
sidebarPanel (
selectInput( "inState", "Select a field to create histogram", choices = names(dfmerge) )
),
mainPanel(
plotOutput("grafico")
)
)
) #fim search
) #fimtab items
)
ui <- dashboardPage(header, sidebar, body)
server <- (function(input, output) {
output$grafico <- renderPlot({
if( is.factor(dfmerge[,input$inState]) || is.character(dfmerge[,input$inState])) {
barplot(summary(as.factor(dfmerge[,input$inState])),col = "#75AADB")
}
else
hist((dfmerge[,input$inState]),col = "#75AADB")
})
# output$age_graph <- renderPlot({
#   barplot(table(dfmerge$age),main = "Age frequency",
#           xlab = "Frequency",
#           ylab = "Age")
# })
# output$los_graph <- renderPlot({
#   hist(ICUSTAYS$LOS,breaks= "FD",xlim = c(0,50),main = "Length of Stay frequency",
#           xlab = "Frequency",
#           ylab = "LOS")
# })
output$los_graph <- renderPlotly({
plot_ly(
data = ICUSTAYS,
x = ~LOS,
type = "histogram"
) %>%
layout(title= "Histogram of Length of Stay",
xaxis= list(title = "Days" )
)
})
output$age_graph <- renderPlotly({
plot_ly(
data = filter(dfmerge, age <300 & age > 0),
x = ~age,
type="histogram"
) %>%
layout(title= "Histogram of age",
xaxis= list(title = "Years" )
)
})
output$diseases <- renderDataTable(
admission_temp
)
dfmerge2 <- subset(dfmerge, select = -c(HOSPITAL_EXPIRE_FLAG,HAS_CHARTEVENTS_DATA, EXPIRE_FLAG))
filtered_gender <- reactive({
if(input$in_gender == "ALL"){
dfmerge2
} else {
dfmerge2 %>%
filter(GENDER == input$in_gender)
}
})
filtered_ethnicity <- reactive({
if(input$in_ethnicity == "ALL"){
filtered_gender()
} else {
filtered_gender() %>%
filter(ETHNICITY == input$in_ethnicity)
}
})
filtered_religion <- reactive({
if(input$in_religion == "ALL"){
filtered_ethnicity()
} else {
filtered_ethnicity() %>%
filter(RELIGION == input$in_religion)
}
})
filtered_age <- reactive({
if(input$in_age == "-1" ){
filtered_religion()
}
else{
filtered_religion() %>%
filter( age >= input$in_age[1] & age <= input$in_age[2])
}
})
fully_filtered <- eventReactive(input$select, {
filtered_age()
})
output$summary <- renderPrint({
summary(fully_filtered())
})
output$mytable1 <- DT::renderDataTable({
DT::datatable(admission_temp)
})
output$grafico1 <- renderPlotly({
plot_ly(
data = ADMISSIONS,
x = ~ADMISSION_TYPE,
type="histogram"
) %>%
layout(title= "Admission Type " ,
xaxis= list(title = "Type" )
)
})
output$mytable2 <- DT::renderDataTable({
DT::datatable(admission_loc)
})
output$grafico2 <- renderPlotly({
plot_ly(
data = ADMISSIONS,
x = ~ADMISSION_LOCATION,
type="histogram"
) %>%
layout(title= "Admission Location " ,
xaxis= list(title = "Location" )
)
})
output$mytable3 <- DT::renderDataTable({
DT::datatable(discharge_loc)
})
output$grafico3 <- renderPlotly({
plot_ly(
data = ADMISSIONS,
x = ~DISCHARGE_LOCATION,
type="histogram"
) %>%
layout(title= "Discharge Location " ,
xaxis= list(title = "Location" )
)
})
output$mytable4 <- DT::renderDataTable({
DT::datatable(insurance_temp)
})
output$grafico4 <- renderPlotly({
plot_ly(
data = ADMISSIONS,
x = ~INSURANCE,
type="histogram"
) %>%
layout(title= "Insurance " ,
xaxis= list(title = "Insurance" ,
categoryorder = "total descending")
)
})
output$mytable5 <- DT::renderDataTable({
DT::datatable(diagnosis_temp)
})
output$grafico5 <- renderPlotly({
plot_ly(
data = diagnosis_temp,
x = ~D,
type="bar"
) %>%
layout(title= "Diagnosis " ,
xaxis= list(title = "Diagnosis" )
)
})
output$graficoICDS <-  renderPlotly({
plot_ly(
data = diagnosesPlot,
x = ~ICD9CODE,
y = ~Frequency,
type = "bar",
text = ~Frequency,
textposition = "auto",
hoverinfo = "text",
hovertext = paste("IC9-Code:", diagnosesPlot$ICD9CODE)
) %>%
layout(title= "Frequency of each ICD9 code"
)
})
output$icddiagnoses <- renderPlotly({
if(input$code9 == "blood"){
counts <- as.data.frame(table(blood289$ICD9_CODE))
plot_ly(
data = counts,
x = ~Var1,
y=~Freq,
type = "bar"
) %>%
layout(title= "Frequency of each ICD9 ",
xaxis= list(title = "ICD Code" ,
categoryorder = "total descending")
)
}
else if (input$code9 == "neoplasm") {
counts <- as.data.frame(table(neoplasms239$ICD9_CODE))
plot_ly(
data = counts,
x = ~Var1,
y=~Freq,
type = "bar"
) %>%
layout(title= "Frequency of each ICD9 ",
xaxis= list(title = "ICD Code" ,
categoryorder = "total descending")
)
}
else if (input$code9 == "parasit") {
counts <- as.data.frame(table(infections139$ICD9_CODE))
plot_ly(
data = counts,
x = ~Var1,
y=~Freq,
type = "bar"
) %>%
layout(title= "Frequency of each ICD9 ",
xaxis= list(title = "ICD Code" ,
categoryorder = "total descending")
)
}
else if (input$code9 == "endocrine") {
counts <- as.data.frame(table(endocrine279$ICD9_CODE))
plot_ly(
data = counts,
x = ~Var1,
y=~Freq,
type = "bar"
) %>%
layout(title= "Frequency of each ICD9 ",
xaxis= list(title = "ICD Code" ,
categoryorder = "total descending")
)
}
else if (input$code9 == "mental") {
counts <- as.data.frame(table(mental319$ICD9_CODE))
plot_ly(
data = counts,
x = ~Var1,
y=~Freq,
type = "bar"
) %>%
layout(title= "Frequency of each ICD9 ",
xaxis= list(title = "ICD Code" ,
categoryorder = "total descending")
)
}
else if (input$code9 == "nervous") {
counts <- as.data.frame(table(nervous389$ICD9_CODE))
plot_ly(
data = counts,
x = ~Var1,
y=~Freq,
type = "bar"
) %>%
layout(title= "Frequency of each ICD9 ",
xaxis= list(title = "ICD Code" ,
categoryorder = "total descending")
)
}
else if (input$code9 == "circulatory") {
counts <- as.data.frame(table(circulatory459$ICD9_CODE))
plot_ly(
data = counts,
x = ~Var1,
y=~Freq,
type = "bar"
) %>%
layout(title= "Frequency of each ICD9 ",
xaxis= list(title = "ICD Code" ,
categoryorder = "total descending")
)
}
else if (input$code9 == "respiratory") {
counts <- as.data.frame(table(respiratory519$ICD9_CODE))
plot_ly(
data = counts,
x = ~Var1,
y=~Freq,
type = "bar"
) %>%
layout(title= "Frequency of each ICD9 ",
xaxis= list(title = "ICD Code" ,
categoryorder = "total descending")
)
}
else if (input$code9 == "digestive") {
counts <- as.data.frame(table(digestive579$ICD9_CODE))
plot_ly(
data = counts,
x = ~Var1,
y=~Freq,
type = "bar"
) %>%
layout(title= "Frequency of each ICD9 ",
xaxis= list(title = "ICD Code" ,
categoryorder = "total descending")
)
}
else if (input$code9 == "genitourinary") {
counts <- as.data.frame(table(genitourinary629$ICD9_CODE))
plot_ly(
data = counts,
x = ~Var1,
y=~Freq,
type = "bar"
) %>%
layout(title= "Frequency of each ICD9 ",
xaxis= list(title = "ICD Code" ,
categoryorder = "total descending")
)
}
else if (input$code9 == "pregnancy") {
counts <- as.data.frame(table(pregnancy679$ICD9_CODE))
plot_ly(
data = counts,
x = ~Var1,
y=~Freq,
type = "bar"
) %>%
layout(title= "Frequency of each ICD9 ",
xaxis= list(title = "ICD Code" ,
categoryorder = "total descending")
)
}
else if (input$code9 == "skin") {
counts <- as.data.frame(table(skin709$ICD9_CODE))
plot_ly(
data = counts,
x = ~Var1,
y=~Freq,
type = "bar"
) %>%
layout(title= "Frequency of each ICD9 ",
xaxis= list(title = "ICD Code" ,
categoryorder = "total descending")
)
}
else if (input$code9 == "muscle") {
counts <- as.data.frame(table(muscle739$ICD9_CODE))
plot_ly(
data = counts,
x = ~Var1,
y=~Freq,
type = "bar"
) %>%
layout(title= "Frequency of each ICD9 ",
xaxis= list(title = "ICD Code" ,
categoryorder = "total descending")
)
}
else if (input$code9 == "anomalies") {
counts <- as.data.frame(table(congenital759$ICD9_CODE))
plot_ly(
data = counts,
x = ~Var1,
y=~Freq,
type = "bar"
) %>%
layout(title= "Frequency of each ICD9 ",
xaxis= list(title = "ICD Code" ,
categoryorder = "total descending")
)
}
else if (input$code9 == "perinatal") {
counts <- as.data.frame(table(perinatal779$ICD9_CODE))
plot_ly(
data = counts,
x = ~Var1,
y=~Freq,
type = "bar"
) %>%
layout(title= "Frequency of each ICD9 ",
xaxis= list(title = "ICD Code" ,
categoryorder = "total descending")
)
}
else if (input$code9 == "signs") {
counts <- as.data.frame(table(symptoms799$ICD9_CODE))
plot_ly(
data = counts,
x = ~Var1,
y=~Freq,
type = "bar"
) %>%
layout(title= "Frequency of each ICD9 ",
xaxis= list(title = "ICD Code" ,
categoryorder = "total descending")
)
}
else if (input$code9 == "poison") {
counts <- as.data.frame(table(injury999$ICD9_CODE))
plot_ly(
data = counts,
x = ~Var1,
y=~Freq,
type = "bar"
) %>%
layout(title= "Frequency of each ICD9 ",
xaxis= list(title = "ICD Code" ,
categoryorder = "total descending")
)
}
else if (input$code9 == "v1") {
counts <- as.data.frame(table(v$ICD9_CODE))
plot_ly(
data = counts,
x = ~Var1,
y=~Freq,
type = "bar"
) %>%
layout(title= "Frequency of each ICD9 ",
xaxis= list(title = "ICD Code" ,
categoryorder = "total descending")
)
}
else if (input$code9 == "v2") {
counts <- as.data.frame(table(e$ICD9_CODE))
plot_ly(
data = counts,
x = ~Var1,
y=~Freq,
type = "bar"
) %>%
layout(title= "Frequency of each ICD9 ",
xaxis= list(title = "Range of ICD9 Codes" ,
categoryorder = "total descending")
)
}
})
})
shinyApp(ui, server)
#TODO 13/6/2022
#CRIAR SUMMARY DE GRUPO DE DOENTES NO MENU DIAGNOSES + LISTA DE PACIENTES COM ESSA DOENÇA
#CRIAR SUBMENU DOENTES + item de cada paciente
#corrigir legenda do grafico DONE
#general info precisa de legenda!! DONE
